// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyBundle A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
// swagger:model PolicyBundle
type PolicyBundle struct {

	// blacklisted images
	BlacklistedImages PolicyBundleBlacklistedImages `json:"blacklisted_images"`

	// Description of the bundle, human readable
	Comment string `json:"comment,omitempty"`

	// Id of the bundle
	// Required: true
	ID *string `json:"id"`

	// mappings
	// Required: true
	Mappings PolicyBundleMappings `json:"mappings"`

	// Human readable name for the bundle
	Name string `json:"name,omitempty"`

	// policies
	// Required: true
	Policies PolicyBundlePolicies `json:"policies"`

	// Version id for this bundle format
	// Required: true
	Version *string `json:"version"`

	// whitelisted images
	WhitelistedImages PolicyBundleWhitelistedImages `json:"whitelisted_images"`

	// whitelists
	Whitelists PolicyBundleWhitelists `json:"whitelists"`
}

// Validate validates this policy bundle
func (m *PolicyBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBundle) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBundle) validateMappings(formats strfmt.Registry) error {

	if err := validate.Required("mappings", "body", m.Mappings); err != nil {
		return err
	}

	if err := m.Mappings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mappings")
		}
		return err
	}

	return nil
}

func (m *PolicyBundle) validatePolicies(formats strfmt.Registry) error {

	if err := validate.Required("policies", "body", m.Policies); err != nil {
		return err
	}

	if err := m.Policies.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policies")
		}
		return err
	}

	return nil
}

func (m *PolicyBundle) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyBundle) UnmarshalBinary(b []byte) error {
	var res PolicyBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
