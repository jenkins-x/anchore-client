// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ImageAnalysisRequest A request to add an image to be watched and analyzed by the engine. Optionally include the dockerfile content. Either digest or tag must be present
// swagger:model ImageAnalysisRequest
type ImageAnalysisRequest struct {

	// Annotations to be associated with the added image in key/value form
	Annotations interface{} `json:"annotations,omitempty"`

	// A full pullable digest reference for an image. e.g. docker.io/nginx@sha256:abc123
	Digest string `json:"digest,omitempty"`

	// Content of the dockerfile for the image, if available
	Dockerfile string `json:"dockerfile,omitempty"`

	// The type of image this is adding, defaults to "docker"
	ImageType string `json:"image_type,omitempty"`

	// Full pullable tag reference for image. e.g. docker.io/nginx:latest
	Tag string `json:"tag,omitempty"`
}

// Validate validates this image analysis request
func (m *ImageAnalysisRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ImageAnalysisRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageAnalysisRequest) UnmarshalBinary(b []byte) error {
	var res ImageAnalysisRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
