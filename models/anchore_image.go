// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnchoreImage A unique image in the engine. May have multiple tags or references. Unique to an image content across registries or repositories.
// swagger:model AnchoreImage
type AnchoreImage struct {

	// A state value for the current status of the analysis progress of the image
	AnalysisStatus string `json:"analysis_status,omitempty"`

	// created at
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// image digest
	ImageDigest string `json:"imageDigest,omitempty"`

	// image content
	ImageContent ImageContent `json:"image_content,omitempty"`

	// image detail
	ImageDetail AnchoreImageImageDetail `json:"image_detail"`

	// State of the image
	ImageStatus string `json:"image_status,omitempty"`

	// last updated
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this anchore image
func (m *AnchoreImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalysisStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var anchoreImageTypeAnalysisStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_analyzed","analyzing","analyzed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		anchoreImageTypeAnalysisStatusPropEnum = append(anchoreImageTypeAnalysisStatusPropEnum, v)
	}
}

const (
	// AnchoreImageAnalysisStatusNotAnalyzed captures enum value "not_analyzed"
	AnchoreImageAnalysisStatusNotAnalyzed string = "not_analyzed"
	// AnchoreImageAnalysisStatusAnalyzing captures enum value "analyzing"
	AnchoreImageAnalysisStatusAnalyzing string = "analyzing"
	// AnchoreImageAnalysisStatusAnalyzed captures enum value "analyzed"
	AnchoreImageAnalysisStatusAnalyzed string = "analyzed"
)

// prop value enum
func (m *AnchoreImage) validateAnalysisStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, anchoreImageTypeAnalysisStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnchoreImage) validateAnalysisStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AnalysisStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAnalysisStatusEnum("analysis_status", "body", m.AnalysisStatus); err != nil {
		return err
	}

	return nil
}

var anchoreImageTypeImageStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		anchoreImageTypeImageStatusPropEnum = append(anchoreImageTypeImageStatusPropEnum, v)
	}
}

const (
	// AnchoreImageImageStatusActive captures enum value "active"
	AnchoreImageImageStatusActive string = "active"
	// AnchoreImageImageStatusInactive captures enum value "inactive"
	AnchoreImageImageStatusInactive string = "inactive"
	// AnchoreImageImageStatusDisabled captures enum value "disabled"
	AnchoreImageImageStatusDisabled string = "disabled"
)

// prop value enum
func (m *AnchoreImage) validateImageStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, anchoreImageTypeImageStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnchoreImage) validateImageStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageStatusEnum("image_status", "body", m.ImageStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnchoreImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnchoreImage) UnmarshalBinary(b []byte) error {
	var res AnchoreImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
