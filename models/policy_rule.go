// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyRule A rule that defines and decision value if the match is found true for a given image.
// swagger:model PolicyRule
type PolicyRule struct {

	// action
	// Required: true
	Action interface{} `json:"action"`

	// gate
	// Required: true
	Gate *string `json:"gate"`

	// id
	ID string `json:"id,omitempty"`

	// params
	Params PolicyRuleParams `json:"params"`

	// trigger
	// Required: true
	Trigger *string `json:"trigger"`
}

// Validate validates this policy rule
func (m *PolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyRuleTypeActionPropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["GO","STOP","WARN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyRuleTypeActionPropEnum = append(policyRuleTypeActionPropEnum, v)
	}
}

// prop value enum
func (m *PolicyRule) validateActionEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, policyRuleTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyRule) validateAction(formats strfmt.Registry) error {

	return nil
}

func (m *PolicyRule) validateGate(formats strfmt.Registry) error {

	if err := validate.Required("gate", "body", m.Gate); err != nil {
		return err
	}

	return nil
}

func (m *PolicyRule) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyRule) UnmarshalBinary(b []byte) error {
	var res PolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
