// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jenkins-x/anchore-client/models"
)

// NewAddImageParams creates a new AddImageParams object
// with the default values initialized.
func NewAddImageParams() *AddImageParams {
	var ()
	return &AddImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddImageParamsWithTimeout creates a new AddImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddImageParamsWithTimeout(timeout time.Duration) *AddImageParams {
	var ()
	return &AddImageParams{

		timeout: timeout,
	}
}

// NewAddImageParamsWithContext creates a new AddImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddImageParamsWithContext(ctx context.Context) *AddImageParams {
	var ()
	return &AddImageParams{

		Context: ctx,
	}
}

// NewAddImageParamsWithHTTPClient creates a new AddImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddImageParamsWithHTTPClient(client *http.Client) *AddImageParams {
	var ()
	return &AddImageParams{
		HTTPClient: client,
	}
}

/*AddImageParams contains all the parameters to send to the API endpoint
for the add image operation typically these are written to a http.Request
*/
type AddImageParams struct {

	/*Autosubscribe
	  Instruct engine to automatically begin watching the added tag for updates from registry

	*/
	Autosubscribe *bool
	/*Force
	  Override any existing entry in the system

	*/
	Force *bool
	/*Image*/
	Image *models.ImageAnalysisRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add image params
func (o *AddImageParams) WithTimeout(timeout time.Duration) *AddImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add image params
func (o *AddImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add image params
func (o *AddImageParams) WithContext(ctx context.Context) *AddImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add image params
func (o *AddImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add image params
func (o *AddImageParams) WithHTTPClient(client *http.Client) *AddImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add image params
func (o *AddImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutosubscribe adds the autosubscribe to the add image params
func (o *AddImageParams) WithAutosubscribe(autosubscribe *bool) *AddImageParams {
	o.SetAutosubscribe(autosubscribe)
	return o
}

// SetAutosubscribe adds the autosubscribe to the add image params
func (o *AddImageParams) SetAutosubscribe(autosubscribe *bool) {
	o.Autosubscribe = autosubscribe
}

// WithForce adds the force to the add image params
func (o *AddImageParams) WithForce(force *bool) *AddImageParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the add image params
func (o *AddImageParams) SetForce(force *bool) {
	o.Force = force
}

// WithImage adds the image to the add image params
func (o *AddImageParams) WithImage(image *models.ImageAnalysisRequest) *AddImageParams {
	o.SetImage(image)
	return o
}

// SetImage adds the image to the add image params
func (o *AddImageParams) SetImage(image *models.ImageAnalysisRequest) {
	o.Image = image
}

// WriteToRequest writes these params to a swagger request
func (o *AddImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Autosubscribe != nil {

		// query param autosubscribe
		var qrAutosubscribe bool
		if o.Autosubscribe != nil {
			qrAutosubscribe = *o.Autosubscribe
		}
		qAutosubscribe := swag.FormatBool(qrAutosubscribe)
		if qAutosubscribe != "" {
			if err := r.SetQueryParam("autosubscribe", qAutosubscribe); err != nil {
				return err
			}
		}

	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.Image != nil {
		if err := r.SetBodyParam(o.Image); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
