// Code generated by go-swagger; DO NOT EDIT.

package registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRegistryParams creates a new GetRegistryParams object
// with the default values initialized.
func NewGetRegistryParams() *GetRegistryParams {
	var ()
	return &GetRegistryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegistryParamsWithTimeout creates a new GetRegistryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRegistryParamsWithTimeout(timeout time.Duration) *GetRegistryParams {
	var ()
	return &GetRegistryParams{

		timeout: timeout,
	}
}

// NewGetRegistryParamsWithContext creates a new GetRegistryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRegistryParamsWithContext(ctx context.Context) *GetRegistryParams {
	var ()
	return &GetRegistryParams{

		Context: ctx,
	}
}

// NewGetRegistryParamsWithHTTPClient creates a new GetRegistryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRegistryParamsWithHTTPClient(client *http.Client) *GetRegistryParams {
	var ()
	return &GetRegistryParams{
		HTTPClient: client,
	}
}

/*GetRegistryParams contains all the parameters to send to the API endpoint
for the get registry operation typically these are written to a http.Request
*/
type GetRegistryParams struct {

	/*Registry*/
	Registry string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get registry params
func (o *GetRegistryParams) WithTimeout(timeout time.Duration) *GetRegistryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get registry params
func (o *GetRegistryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get registry params
func (o *GetRegistryParams) WithContext(ctx context.Context) *GetRegistryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get registry params
func (o *GetRegistryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get registry params
func (o *GetRegistryParams) WithHTTPClient(client *http.Client) *GetRegistryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get registry params
func (o *GetRegistryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistry adds the registry to the get registry params
func (o *GetRegistryParams) WithRegistry(registry string) *GetRegistryParams {
	o.SetRegistry(registry)
	return o
}

// SetRegistry adds the registry to the get registry params
func (o *GetRegistryParams) SetRegistry(registry string) {
	o.Registry = registry
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegistryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param registry
	if err := r.SetPathParam("registry", o.Registry); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
