// Code generated by go-swagger; DO NOT EDIT.

package registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new registries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRegistry adds a new registry

Adds a new registry to the system
*/
func (a *Client) CreateRegistry(params *CreateRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_registry",
		Method:             "POST",
		PathPattern:        "/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRegistryOK), nil

}

/*
DeleteRegistry deletes a registry configuration

Delete a registry configuration record from the system. Does not remove any images.
*/
func (a *Client) DeleteRegistry(params *DeleteRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_registry",
		Method:             "DELETE",
		PathPattern:        "/registries/{registry}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRegistryOK), nil

}

/*
GetRegistry gets a specific registry configuration

Get information on a specific registry
*/
func (a *Client) GetRegistry(params *GetRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_registry",
		Method:             "GET",
		PathPattern:        "/registries/{registry}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistryOK), nil

}

/*
ListRegistries lists configured registries

List all configured registries the system can/will watch
*/
func (a *Client) ListRegistries(params *ListRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_registries",
		Method:             "GET",
		PathPattern:        "/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRegistriesOK), nil

}

/*
UpdateRegistry updates replace a registry configuration

Replaces an existing registry record with the given record
*/
func (a *Client) UpdateRegistry(params *UpdateRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_registry",
		Method:             "PUT",
		PathPattern:        "/registries/{registry}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRegistryOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
