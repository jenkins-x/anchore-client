// Code generated by go-swagger; DO NOT EDIT.

package registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jenkins-x/anchore-client/models"
)

// NewUpdateRegistryParams creates a new UpdateRegistryParams object
// with the default values initialized.
func NewUpdateRegistryParams() *UpdateRegistryParams {
	var ()
	return &UpdateRegistryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRegistryParamsWithTimeout creates a new UpdateRegistryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateRegistryParamsWithTimeout(timeout time.Duration) *UpdateRegistryParams {
	var ()
	return &UpdateRegistryParams{

		timeout: timeout,
	}
}

// NewUpdateRegistryParamsWithContext creates a new UpdateRegistryParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateRegistryParamsWithContext(ctx context.Context) *UpdateRegistryParams {
	var ()
	return &UpdateRegistryParams{

		Context: ctx,
	}
}

// NewUpdateRegistryParamsWithHTTPClient creates a new UpdateRegistryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateRegistryParamsWithHTTPClient(client *http.Client) *UpdateRegistryParams {
	var ()
	return &UpdateRegistryParams{
		HTTPClient: client,
	}
}

/*UpdateRegistryParams contains all the parameters to send to the API endpoint
for the update registry operation typically these are written to a http.Request
*/
type UpdateRegistryParams struct {

	/*Registry*/
	Registry string
	/*Registrydata*/
	Registrydata *models.RegistryConfiguration

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update registry params
func (o *UpdateRegistryParams) WithTimeout(timeout time.Duration) *UpdateRegistryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update registry params
func (o *UpdateRegistryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update registry params
func (o *UpdateRegistryParams) WithContext(ctx context.Context) *UpdateRegistryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update registry params
func (o *UpdateRegistryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update registry params
func (o *UpdateRegistryParams) WithHTTPClient(client *http.Client) *UpdateRegistryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update registry params
func (o *UpdateRegistryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistry adds the registry to the update registry params
func (o *UpdateRegistryParams) WithRegistry(registry string) *UpdateRegistryParams {
	o.SetRegistry(registry)
	return o
}

// SetRegistry adds the registry to the update registry params
func (o *UpdateRegistryParams) SetRegistry(registry string) {
	o.Registry = registry
}

// WithRegistrydata adds the registrydata to the update registry params
func (o *UpdateRegistryParams) WithRegistrydata(registrydata *models.RegistryConfiguration) *UpdateRegistryParams {
	o.SetRegistrydata(registrydata)
	return o
}

// SetRegistrydata adds the registrydata to the update registry params
func (o *UpdateRegistryParams) SetRegistrydata(registrydata *models.RegistryConfiguration) {
	o.Registrydata = registrydata
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRegistryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param registry
	if err := r.SetPathParam("registry", o.Registry); err != nil {
		return err
	}

	if o.Registrydata != nil {
		if err := r.SetBodyParam(o.Registrydata); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
