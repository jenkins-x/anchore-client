// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jenkins-x/anchore-client/models"
)

// AddPolicyReader is a Reader for the AddPolicy structure.
type AddPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewAddPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddPolicyOK creates a AddPolicyOK with default headers values
func NewAddPolicyOK() *AddPolicyOK {
	return &AddPolicyOK{}
}

/*AddPolicyOK handles this case with default header values.

Saved bundle
*/
type AddPolicyOK struct {
	Payload *models.PolicyBundleRecord
}

func (o *AddPolicyOK) Error() string {
	return fmt.Sprintf("[POST /policies][%d] addPolicyOK  %+v", 200, o.Payload)
}

func (o *AddPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PolicyBundleRecord)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPolicyInternalServerError creates a AddPolicyInternalServerError with default headers values
func NewAddPolicyInternalServerError() *AddPolicyInternalServerError {
	return &AddPolicyInternalServerError{}
}

/*AddPolicyInternalServerError handles this case with default header values.

Internal Error
*/
type AddPolicyInternalServerError struct {
	Payload *models.APIErrorResponse
}

func (o *AddPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /policies][%d] addPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *AddPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
