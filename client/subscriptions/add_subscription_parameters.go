// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jenkins-x/anchore-client/models"
)

// NewAddSubscriptionParams creates a new AddSubscriptionParams object
// with the default values initialized.
func NewAddSubscriptionParams() *AddSubscriptionParams {
	var ()
	return &AddSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSubscriptionParamsWithTimeout creates a new AddSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSubscriptionParamsWithTimeout(timeout time.Duration) *AddSubscriptionParams {
	var ()
	return &AddSubscriptionParams{

		timeout: timeout,
	}
}

// NewAddSubscriptionParamsWithContext creates a new AddSubscriptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSubscriptionParamsWithContext(ctx context.Context) *AddSubscriptionParams {
	var ()
	return &AddSubscriptionParams{

		Context: ctx,
	}
}

// NewAddSubscriptionParamsWithHTTPClient creates a new AddSubscriptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSubscriptionParamsWithHTTPClient(client *http.Client) *AddSubscriptionParams {
	var ()
	return &AddSubscriptionParams{
		HTTPClient: client,
	}
}

/*AddSubscriptionParams contains all the parameters to send to the API endpoint
for the add subscription operation typically these are written to a http.Request
*/
type AddSubscriptionParams struct {

	/*Subscription*/
	Subscription *models.SubscriptionRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add subscription params
func (o *AddSubscriptionParams) WithTimeout(timeout time.Duration) *AddSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add subscription params
func (o *AddSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add subscription params
func (o *AddSubscriptionParams) WithContext(ctx context.Context) *AddSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add subscription params
func (o *AddSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add subscription params
func (o *AddSubscriptionParams) WithHTTPClient(client *http.Client) *AddSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add subscription params
func (o *AddSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscription adds the subscription to the add subscription params
func (o *AddSubscriptionParams) WithSubscription(subscription *models.SubscriptionRequest) *AddSubscriptionParams {
	o.SetSubscription(subscription)
	return o
}

// SetSubscription adds the subscription to the add subscription params
func (o *AddSubscriptionParams) SetSubscription(subscription *models.SubscriptionRequest) {
	o.Subscription = subscription
}

// WriteToRequest writes these params to a swagger request
func (o *AddSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Subscription != nil {
		if err := r.SetBodyParam(o.Subscription); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
