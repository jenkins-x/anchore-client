// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddRepositoryParams creates a new AddRepositoryParams object
// with the default values initialized.
func NewAddRepositoryParams() *AddRepositoryParams {
	var ()
	return &AddRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddRepositoryParamsWithTimeout creates a new AddRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddRepositoryParamsWithTimeout(timeout time.Duration) *AddRepositoryParams {
	var ()
	return &AddRepositoryParams{

		timeout: timeout,
	}
}

// NewAddRepositoryParamsWithContext creates a new AddRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddRepositoryParamsWithContext(ctx context.Context) *AddRepositoryParams {
	var ()
	return &AddRepositoryParams{

		Context: ctx,
	}
}

// NewAddRepositoryParamsWithHTTPClient creates a new AddRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddRepositoryParamsWithHTTPClient(client *http.Client) *AddRepositoryParams {
	var ()
	return &AddRepositoryParams{
		HTTPClient: client,
	}
}

/*AddRepositoryParams contains all the parameters to send to the API endpoint
for the add repository operation typically these are written to a http.Request
*/
type AddRepositoryParams struct {

	/*Autosubscribe
	  flag to enable/disable auto tag_update activation when new images from a repo are added

	*/
	Autosubscribe *bool
	/*Lookuptag
	  use specified existing tag to perform repo scan (default is 'latest')

	*/
	Lookuptag *string
	/*Repository
	  full repository to add e.g. docker.io/library/alpine

	*/
	Repository string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add repository params
func (o *AddRepositoryParams) WithTimeout(timeout time.Duration) *AddRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add repository params
func (o *AddRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add repository params
func (o *AddRepositoryParams) WithContext(ctx context.Context) *AddRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add repository params
func (o *AddRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add repository params
func (o *AddRepositoryParams) WithHTTPClient(client *http.Client) *AddRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add repository params
func (o *AddRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutosubscribe adds the autosubscribe to the add repository params
func (o *AddRepositoryParams) WithAutosubscribe(autosubscribe *bool) *AddRepositoryParams {
	o.SetAutosubscribe(autosubscribe)
	return o
}

// SetAutosubscribe adds the autosubscribe to the add repository params
func (o *AddRepositoryParams) SetAutosubscribe(autosubscribe *bool) {
	o.Autosubscribe = autosubscribe
}

// WithLookuptag adds the lookuptag to the add repository params
func (o *AddRepositoryParams) WithLookuptag(lookuptag *string) *AddRepositoryParams {
	o.SetLookuptag(lookuptag)
	return o
}

// SetLookuptag adds the lookuptag to the add repository params
func (o *AddRepositoryParams) SetLookuptag(lookuptag *string) {
	o.Lookuptag = lookuptag
}

// WithRepository adds the repository to the add repository params
func (o *AddRepositoryParams) WithRepository(repository string) *AddRepositoryParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the add repository params
func (o *AddRepositoryParams) SetRepository(repository string) {
	o.Repository = repository
}

// WriteToRequest writes these params to a swagger request
func (o *AddRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Autosubscribe != nil {

		// query param autosubscribe
		var qrAutosubscribe bool
		if o.Autosubscribe != nil {
			qrAutosubscribe = *o.Autosubscribe
		}
		qAutosubscribe := swag.FormatBool(qrAutosubscribe)
		if qAutosubscribe != "" {
			if err := r.SetQueryParam("autosubscribe", qAutosubscribe); err != nil {
				return err
			}
		}

	}

	if o.Lookuptag != nil {

		// query param lookuptag
		var qrLookuptag string
		if o.Lookuptag != nil {
			qrLookuptag = *o.Lookuptag
		}
		qLookuptag := qrLookuptag
		if qLookuptag != "" {
			if err := r.SetQueryParam("lookuptag", qLookuptag); err != nil {
				return err
			}
		}

	}

	// query param repository
	qrRepository := o.Repository
	qRepository := qrRepository
	if qRepository != "" {
		if err := r.SetQueryParam("repository", qRepository); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
