// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetImagePolicyCheckParams creates a new GetImagePolicyCheckParams object
// with the default values initialized.
func NewGetImagePolicyCheckParams() *GetImagePolicyCheckParams {
	var ()
	return &GetImagePolicyCheckParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetImagePolicyCheckParamsWithTimeout creates a new GetImagePolicyCheckParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetImagePolicyCheckParamsWithTimeout(timeout time.Duration) *GetImagePolicyCheckParams {
	var ()
	return &GetImagePolicyCheckParams{

		timeout: timeout,
	}
}

// NewGetImagePolicyCheckParamsWithContext creates a new GetImagePolicyCheckParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetImagePolicyCheckParamsWithContext(ctx context.Context) *GetImagePolicyCheckParams {
	var ()
	return &GetImagePolicyCheckParams{

		Context: ctx,
	}
}

// NewGetImagePolicyCheckParamsWithHTTPClient creates a new GetImagePolicyCheckParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetImagePolicyCheckParamsWithHTTPClient(client *http.Client) *GetImagePolicyCheckParams {
	var ()
	return &GetImagePolicyCheckParams{
		HTTPClient: client,
	}
}

/*GetImagePolicyCheckParams contains all the parameters to send to the API endpoint
for the get image policy check operation typically these are written to a http.Request
*/
type GetImagePolicyCheckParams struct {

	/*Detail*/
	Detail *bool
	/*History*/
	History *bool
	/*ImageDigest*/
	ImageDigest string
	/*PolicyID*/
	PolicyID *string
	/*Tag*/
	Tag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get image policy check params
func (o *GetImagePolicyCheckParams) WithTimeout(timeout time.Duration) *GetImagePolicyCheckParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get image policy check params
func (o *GetImagePolicyCheckParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get image policy check params
func (o *GetImagePolicyCheckParams) WithContext(ctx context.Context) *GetImagePolicyCheckParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get image policy check params
func (o *GetImagePolicyCheckParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get image policy check params
func (o *GetImagePolicyCheckParams) WithHTTPClient(client *http.Client) *GetImagePolicyCheckParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get image policy check params
func (o *GetImagePolicyCheckParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDetail adds the detail to the get image policy check params
func (o *GetImagePolicyCheckParams) WithDetail(detail *bool) *GetImagePolicyCheckParams {
	o.SetDetail(detail)
	return o
}

// SetDetail adds the detail to the get image policy check params
func (o *GetImagePolicyCheckParams) SetDetail(detail *bool) {
	o.Detail = detail
}

// WithHistory adds the history to the get image policy check params
func (o *GetImagePolicyCheckParams) WithHistory(history *bool) *GetImagePolicyCheckParams {
	o.SetHistory(history)
	return o
}

// SetHistory adds the history to the get image policy check params
func (o *GetImagePolicyCheckParams) SetHistory(history *bool) {
	o.History = history
}

// WithImageDigest adds the imageDigest to the get image policy check params
func (o *GetImagePolicyCheckParams) WithImageDigest(imageDigest string) *GetImagePolicyCheckParams {
	o.SetImageDigest(imageDigest)
	return o
}

// SetImageDigest adds the imageDigest to the get image policy check params
func (o *GetImagePolicyCheckParams) SetImageDigest(imageDigest string) {
	o.ImageDigest = imageDigest
}

// WithPolicyID adds the policyID to the get image policy check params
func (o *GetImagePolicyCheckParams) WithPolicyID(policyID *string) *GetImagePolicyCheckParams {
	o.SetPolicyID(policyID)
	return o
}

// SetPolicyID adds the policyId to the get image policy check params
func (o *GetImagePolicyCheckParams) SetPolicyID(policyID *string) {
	o.PolicyID = policyID
}

// WithTag adds the tag to the get image policy check params
func (o *GetImagePolicyCheckParams) WithTag(tag string) *GetImagePolicyCheckParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get image policy check params
func (o *GetImagePolicyCheckParams) SetTag(tag string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetImagePolicyCheckParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Detail != nil {

		// query param detail
		var qrDetail bool
		if o.Detail != nil {
			qrDetail = *o.Detail
		}
		qDetail := swag.FormatBool(qrDetail)
		if qDetail != "" {
			if err := r.SetQueryParam("detail", qDetail); err != nil {
				return err
			}
		}

	}

	if o.History != nil {

		// query param history
		var qrHistory bool
		if o.History != nil {
			qrHistory = *o.History
		}
		qHistory := swag.FormatBool(qrHistory)
		if qHistory != "" {
			if err := r.SetQueryParam("history", qHistory); err != nil {
				return err
			}
		}

	}

	// path param imageDigest
	if err := r.SetPathParam("imageDigest", o.ImageDigest); err != nil {
		return err
	}

	if o.PolicyID != nil {

		// query param policyId
		var qrPolicyID string
		if o.PolicyID != nil {
			qrPolicyID = *o.PolicyID
		}
		qPolicyID := qrPolicyID
		if qPolicyID != "" {
			if err := r.SetQueryParam("policyId", qPolicyID); err != nil {
				return err
			}
		}

	}

	// query param tag
	qrTag := o.Tag
	qTag := qrTag
	if qTag != "" {
		if err := r.SetQueryParam("tag", qTag); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
