// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetImageContentByTypeParams creates a new GetImageContentByTypeParams object
// with the default values initialized.
func NewGetImageContentByTypeParams() *GetImageContentByTypeParams {
	var ()
	return &GetImageContentByTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetImageContentByTypeParamsWithTimeout creates a new GetImageContentByTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetImageContentByTypeParamsWithTimeout(timeout time.Duration) *GetImageContentByTypeParams {
	var ()
	return &GetImageContentByTypeParams{

		timeout: timeout,
	}
}

// NewGetImageContentByTypeParamsWithContext creates a new GetImageContentByTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetImageContentByTypeParamsWithContext(ctx context.Context) *GetImageContentByTypeParams {
	var ()
	return &GetImageContentByTypeParams{

		Context: ctx,
	}
}

// NewGetImageContentByTypeParamsWithHTTPClient creates a new GetImageContentByTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetImageContentByTypeParamsWithHTTPClient(client *http.Client) *GetImageContentByTypeParams {
	var ()
	return &GetImageContentByTypeParams{
		HTTPClient: client,
	}
}

/*GetImageContentByTypeParams contains all the parameters to send to the API endpoint
for the get image content by type operation typically these are written to a http.Request
*/
type GetImageContentByTypeParams struct {

	/*Ctype*/
	Ctype string
	/*ImageDigest*/
	ImageDigest string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get image content by type params
func (o *GetImageContentByTypeParams) WithTimeout(timeout time.Duration) *GetImageContentByTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get image content by type params
func (o *GetImageContentByTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get image content by type params
func (o *GetImageContentByTypeParams) WithContext(ctx context.Context) *GetImageContentByTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get image content by type params
func (o *GetImageContentByTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get image content by type params
func (o *GetImageContentByTypeParams) WithHTTPClient(client *http.Client) *GetImageContentByTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get image content by type params
func (o *GetImageContentByTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCtype adds the ctype to the get image content by type params
func (o *GetImageContentByTypeParams) WithCtype(ctype string) *GetImageContentByTypeParams {
	o.SetCtype(ctype)
	return o
}

// SetCtype adds the ctype to the get image content by type params
func (o *GetImageContentByTypeParams) SetCtype(ctype string) {
	o.Ctype = ctype
}

// WithImageDigest adds the imageDigest to the get image content by type params
func (o *GetImageContentByTypeParams) WithImageDigest(imageDigest string) *GetImageContentByTypeParams {
	o.SetImageDigest(imageDigest)
	return o
}

// SetImageDigest adds the imageDigest to the get image content by type params
func (o *GetImageContentByTypeParams) SetImageDigest(imageDigest string) {
	o.ImageDigest = imageDigest
}

// WriteToRequest writes these params to a swagger request
func (o *GetImageContentByTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ctype
	if err := r.SetPathParam("ctype", o.Ctype); err != nil {
		return err
	}

	// path param imageDigest
	if err := r.SetPathParam("imageDigest", o.ImageDigest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
