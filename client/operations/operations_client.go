// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteService deletes the service config
*/
func (a *Client) DeleteService(params *DeleteServiceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_service",
		Method:             "DELETE",
		PathPattern:        "/system/services/{servicename}/{hostid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServiceOK), nil

}

/*
DescribePolicy describes the policy language spec implemented by this service

Get the policy language spec for this service
*/
func (a *Client) DescribePolicy(params *DescribePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DescribePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describe_policy",
		Method:             "GET",
		PathPattern:        "/system/policy_spec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribePolicyOK), nil

}

/*
GetImageContentByType gets the content of an image by type
*/
func (a *Client) GetImageContentByType(params *GetImageContentByTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageContentByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageContentByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_content_by_type",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/content/{ctype}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageContentByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageContentByTypeOK), nil

}

/*
GetImageContentByTypeImageID gets the content of an image by type
*/
func (a *Client) GetImageContentByTypeImageID(params *GetImageContentByTypeImageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageContentByTypeImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageContentByTypeImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_content_by_type_imageId",
		Method:             "GET",
		PathPattern:        "/images/by_id/{imageId}/content/{ctype}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageContentByTypeImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageContentByTypeImageIDOK), nil

}

/*
GetImagePolicyCheck checks policy evaluation status for image

Get the policy evaluation for the given image
*/
func (a *Client) GetImagePolicyCheck(params *GetImagePolicyCheckParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagePolicyCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagePolicyCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_policy_check",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagePolicyCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagePolicyCheckOK), nil

}

/*
GetImagePolicyCheckByImageID checks policy evaluation status for image

Get the policy evaluation for the given image
*/
func (a *Client) GetImagePolicyCheckByImageID(params *GetImagePolicyCheckByImageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagePolicyCheckByImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagePolicyCheckByImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_policy_check_by_imageId",
		Method:             "GET",
		PathPattern:        "/images/by_id/{imageId}/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagePolicyCheckByImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagePolicyCheckByImageIDOK), nil

}

/*
GetImageVulnerabilitiesByType gets vulnerabilities by type
*/
func (a *Client) GetImageVulnerabilitiesByType(params *GetImageVulnerabilitiesByTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageVulnerabilitiesByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageVulnerabilitiesByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_vulnerabilities_by_type",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/vuln/{vtype}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageVulnerabilitiesByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageVulnerabilitiesByTypeOK), nil

}

/*
GetImageVulnerabilitiesByTypeImageID gets vulnerabilities by type
*/
func (a *Client) GetImageVulnerabilitiesByTypeImageID(params *GetImageVulnerabilitiesByTypeImageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageVulnerabilitiesByTypeImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageVulnerabilitiesByTypeImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_vulnerabilities_by_type_imageId",
		Method:             "GET",
		PathPattern:        "/images/by_id/{imageId}/vuln/{vtype}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageVulnerabilitiesByTypeImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageVulnerabilitiesByTypeImageIDOK), nil

}

/*
GetImageVulnerabilityTypes gets vulnerability types
*/
func (a *Client) GetImageVulnerabilityTypes(params *GetImageVulnerabilityTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageVulnerabilityTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageVulnerabilityTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_vulnerability_types",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/vuln",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageVulnerabilityTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageVulnerabilityTypesOK), nil

}

/*
GetImageVulnerabilityTypesByImageID gets vulnerability types
*/
func (a *Client) GetImageVulnerabilityTypesByImageID(params *GetImageVulnerabilityTypesByImageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImageVulnerabilityTypesByImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageVulnerabilityTypesByImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_image_vulnerability_types_by_imageId",
		Method:             "GET",
		PathPattern:        "/images/by_id/{imageId}/vuln",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageVulnerabilityTypesByImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageVulnerabilityTypesByImageIDOK), nil

}

/*
GetServicesByName gets a service configuration and state
*/
func (a *Client) GetServicesByName(params *GetServicesByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_services_by_name",
		Method:             "GET",
		PathPattern:        "/system/services/{servicename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServicesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesByNameOK), nil

}

/*
GetServicesByNameAndHost gets service config for a specific host
*/
func (a *Client) GetServicesByNameAndHost(params *GetServicesByNameAndHostParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesByNameAndHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesByNameAndHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_services_by_name_and_host",
		Method:             "GET",
		PathPattern:        "/system/services/{servicename}/{hostid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServicesByNameAndHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesByNameAndHostOK), nil

}

/*
ListImageContent lists image content types
*/
func (a *Client) ListImageContent(params *ListImageContentParams, authInfo runtime.ClientAuthInfoWriter) (*ListImageContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImageContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_image_content",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListImageContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListImageContentOK), nil

}

/*
ListImageContentByImageid lists image content types
*/
func (a *Client) ListImageContentByImageid(params *ListImageContentByImageidParams, authInfo runtime.ClientAuthInfoWriter) (*ListImageContentByImageidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImageContentByImageidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_image_content_by_imageid",
		Method:             "GET",
		PathPattern:        "/images/by_id/{imageId}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListImageContentByImageidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListImageContentByImageidOK), nil

}

/*
ListServices lists system services
*/
func (a *Client) ListServices(params *ListServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_services",
		Method:             "GET",
		PathPattern:        "/system/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListServicesOK), nil

}

/*
Ping Simple status check
*/
func (a *Client) Ping(params *PingParams, authInfo runtime.ClientAuthInfoWriter) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
